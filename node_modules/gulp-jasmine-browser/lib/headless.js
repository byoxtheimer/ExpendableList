//(c) Copyright 2015 Pivotal Software, Inc. All Rights Reserved.
'use strict';

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var es = require('event-stream');
var lazypipe = require('lazypipe');

var _require = require('./server');

var listen = _require.listen;

var once = require('lodash.once');
var path = require('path');
var portfinder = require('portfinder');
var qs = require('qs');
var reduce = require('stream-reduce');

var _require2 = require('child_process');

var spawn = _require2.spawn;

var thenify = require('thenify');

var getPort = thenify(portfinder.getPort);
var noop = function noop() {};

var DEFAULT_JASMINE_PORT = 8888;

var drivers = {
  phantomjs: require('./drivers/phantomjs'),
  phantomjs1: require('./drivers/phantomjs1'),
  slimerjs: require('./drivers/slimerjs'),
  _default: require('./drivers/phantomjs')
};

function getServer(files) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var findOpenPort = options.findOpenPort;
  var _options$port = options.port;
  var port = _options$port === undefined ? DEFAULT_JASMINE_PORT : _options$port;

  if (findOpenPort) return getPort().then(function (port) {
    return listen(port, files, options);
  });
  return listen(port, files, options);
}

function createServer(options) {
  var _options$driver = options.driver;
  var driver = _options$driver === undefined ? 'phantomjs' : _options$driver;
  var random = options.random;
  var throwFailures = options.throwFailures;
  var spec = options.spec;
  var seed = options.seed;

  var query = qs.stringify({ catch: options.catch, random: random, throwFailures: throwFailures, spec: spec, seed: seed });

  var _drivers = drivers[driver in drivers ? driver : '_default']();

  var command = _drivers.command;
  var runner = _drivers.runner;
  var run = _drivers.run;

  var stream = lazypipe().pipe(function () {
    return reduce(function (memo, file) {
      memo[file.relative] = file.contents;
      return memo;
    }, {});
  }).pipe(function () {
    return es.map(function () {
      var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(files, callback) {
        var _ref, server, port;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return getServer(files, options);

              case 2:
                _ref = _context.sent;
                server = _ref.server;
                port = _ref.port;

                callback(null, { server: server, port: port });

              case 6:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      return function (_x2, _x3) {
        return ref.apply(this, arguments);
      };
    }());
  }).pipe(function () {
    return es.through(function () {
      var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(_ref2) {
        var server = _ref2.server;
        var port = _ref2.port;
        var phantomProcess;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.pause();
                phantomProcess = spawn(command, [runner, port, query], { cwd: path.resolve(__dirname), stdio: 'pipe' });

                ['SIGINT', 'SIGTERM'].forEach(function (e) {
                  return process.once(e, function () {
                    return phantomProcess && phantomProcess.kill();
                  });
                });
                _context2.prev = 3;
                _context2.next = 6;
                return run(phantomProcess);

              case 6:
                _context2.next = 11;
                break;

              case 8:
                _context2.prev = 8;
                _context2.t0 = _context2['catch'](3);

                this.emit('error', 'Tests failed');

              case 11:
                _context2.prev = 11;

                this.resume();
                server.close();
                this.emit('end');
                return _context2.finish(11);

              case 16:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[3, 8, 11, 16]]);
      }));
      return function (_x4) {
        return ref.apply(this, arguments);
      };
    }(), noop);
  });
  return stream();
}

function createServerWatch(options) {
  var files = {};
  var createServerOnce = once(function () {
    return getServer(files, options);
  });
  return lazypipe().pipe(function () {
    return es.map(function (file, callback) {
      files[file.relative] = file.contents;
      createServerOnce();
      callback(null, files);
    });
  })();
}

function headless() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  return createServer((0, _extends3.default)({ findOpenPort: true }, options));
}

module.exports = {
  headless: headless,

  server: function server() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    return createServerWatch(options);
  },
  slimerjs: function slimerjs() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    return headless((0, _extends3.default)({ driver: 'slimerjs' }, options));
  },
  phantomjs: function phantomjs() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    return headless((0, _extends3.default)({ driver: 'phantomjs' }, options));
  }
};